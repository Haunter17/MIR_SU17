function audioFreeverbReverberationExampleApp(useMEX, numTSteps)
%AUDIOFREEVERBREVERBERATIONEXAMPLEAPP Apply reverberation to audio
%
% Inputs:
% useMEX       - Uses the MEX file of the algorithm
%                HelperFreeverbReverberation_mex. The MEX file must first
%                be generated by running HelperFreeverbCodeGeneration
% numTSteps    - Number of iteration steps
%
% This function audioFreeverbReverberationExampleApp is only in support of 
% audioFreeverbReverberationExample. It may change in a future release.

% Copyright 2014-2016 The MathWorks, Inc.

%% Initialization

% Default values for inputs
if nargin < 2
    numTSteps = Inf;       % Run until user stops simulation. 
end
if nargin ==0
    useMEX = false;        % Do not use MEX file 
end

% If launched from a standalone executable, parameters will be char.
% Convert them to logical/double values
if ischar(useMEX)
    useMEX = false;
end
if ischar(numTSteps)
    numTSteps = str2double(numTSteps);
end

% Audio source and sink
frameSize = 64;
reader = dsp.AudioFileReader('../orig.wav', ...
    'SamplesPerFrame',frameSize);
player = audioDeviceWriter('SampleRate',reader.SampleRate);

% Parameters to be tuned
param(1).Name = 'Room size';
param(1).InitialValue = 0.9932;
param(1).Limits = [0, 1];

param(2).Name = 'Stereo width';
param(2).InitialValue = 0.5;
param(2).Limits = [0, 1];     

param(3).Name = 'Wet/dry mix';
param(3).InitialValue = 0.3;
param(3).Limits = [0, 1];  

param(4).Name = 'Balance';
param(4).InitialValue = 0.5;
param(4).Limits = [0, 1];  

param(5).Name = 'Volume';
param(5).InitialValue = 1;
param(5).Limits = [0, 1];  

% Create the UI and pass it the parameters
tuningUI = HelperCreateParamTuningUI(param, ...
    'Freeverb reverberation controls','isInLegacyMode',false);
clear HelperFreeverbReverberation HelperFreeverbReverberation_mex

% Create a System object to log your data.
logger = dsp.SignalSink;

%% Streaming
count = 1;
while ~isDone(reader)
    
    S = HelperUnpackUIData(tuningUI);
    
    if S.Pause
        continue;
    end
    
    if S.Stop     % If "Stop Simulation" button is pressed 
        break;
    end
    
    audioIn = reader();
    if size(audioIn,2) == 1
        % Create stereo
        audioIn = [audioIn, audioIn]; %#ok<AGROW>
    end
    
    if ~useMEX
        audioOut = HelperFreeverbReverberation(audioIn,S);
    else
        audioOut = HelperFreeverbReverberation_mex(audioIn,S);
    end
    
    logger(audioOut);
    
%     nUnderrun = player(audioOut);
%     if nUnderrun > 0
%         fprintf('Audio player queue was underrun by %d samples.\n', ...
%             nUnderrun);
%     end
    count = count + 1;
end
reverberated = logger.Buffer;
% player = audioDeviceWriter('SampleRate', reader.SampleRate, ...
%     'SupportVariableSizeInput', true, ...
%     'BufferSize', 512);
% player(reverberated);

disp('saving reverberated signals...');
saveFileName = 'reverberated.wav';
audiowrite(saveFileName, reverberated, reader.SampleRate);

%% Cleanup
if ishghandle(tuningUI)  % If parameter tuning UI is open, then close it.
    delete(tuningUI);
    drawnow;
    clear tuningUI
end
release(reader);
release(player);
clear HelperUnpackUIData
